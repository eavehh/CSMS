#!/usr/bin/env node
/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MeterValues –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ fora072
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è MeterValues –≤–æ –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏
 */

const http = require('http');

const SERVER = '176.88.248.139';
const PORT = 8081;
const STATION = 'fora072';

function sendRemoteCommand(key, value) {
    const data = JSON.stringify({
        chargePointId: STATION,
        action: 'ChangeConfiguration',
        payload: { key, value }
    });

    return new Promise((resolve, reject) => {
        const req = http.request({
            hostname: SERVER,
            port: PORT,
            path: '/api/remote-control',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(data)
            }
        }, (res) => {
            let body = '';
            res.on('data', chunk => body += chunk);
            res.on('end', () => {
                try {
                    const response = JSON.parse(body);
                    resolve(response);
                } catch (e) {
                    resolve({ success: false, error: 'Invalid response' });
                }
            });
        });

        req.on('error', reject);
        req.write(data);
        req.end();
    });
}

async function main() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MeterValues –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ fora072');
    console.log('==============================================\n');

    // 1. –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ MeterValues
    console.log('1Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ MeterValues = 10 —Å–µ–∫—É–Ω–¥');
    try {
        const result = await sendRemoteCommand('MeterValueSampleInterval', '10');
        console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞', result.message || '');
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞:', e.message);
    }

    await new Promise(resolve => setTimeout(resolve, 1000));

    // 2. –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    console.log('\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å');
    try {
        const result = await sendRemoteCommand(
            'MeterValuesSampledData',
            'Energy.Active.Import.Register,Power.Active.Import,Current.Import,Voltage'
        );
        console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞', result.message || '');
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞:', e.message);
    }

    await new Promise(resolve => setTimeout(resolve, 1000));

    // 3. –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ clock-aligned
    console.log('\n3Ô∏è‚É£ –í–∫–ª—é—á–∞–µ–º clock-aligned MeterValues (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)');
    try {
        const result = await sendRemoteCommand('ClockAlignedDataInterval', '60');
        console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞', result.message || '');
    } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞:', e.message);
    }

    console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞—Ä—è–¥–∫—É –Ω–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–µ 3');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('      ssh root@176.88.248.139');
    console.log('      tail -f /root/CSMS/logs/app-$(date +%Y-%m-%d).log | grep -E "(MeterValues|fora)"');
    console.log('   3. –í—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å [MeterValues] —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥\n');
}

main().catch(e => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
    process.exit(1);
});
