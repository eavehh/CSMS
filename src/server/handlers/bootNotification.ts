import { BootNotificationRequest } from '../types/1.6/BootNotification';
import { BootNotificationResponse } from '../types/1.6/BootNotificationResponse';
import { sendRemoteMessage } from '../remoteControl'
import { ChargePoint } from "../../db/mongoose"
import { logger } from '../../logger'
import { LocalList } from "../../db/mongoose"
import { connectionManager } from '../../server/index';
export const INTERVAL: number = 60

export async function handleBootNotification(req: BootNotificationRequest, chargePointId: string, ws: WebSocket): Promise<BootNotificationResponse> {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
    let chargePoint = await ChargePoint.findOne({ id: chargePointId });
    if (chargePoint && chargePoint.lastOffline) {
      const diffTime = new Date().getTime() - chargePoint.lastOffline.getTime()
      if (diffTime >= 24 * 60 * 60 * 1000) {
        const lastLocalList = await LocalList.findOne({ chargePointId }).sort({ updatedAt: -1 });
        if (lastLocalList) {
          sendRemoteMessage(connectionManager, chargePointId, 'SendLocalList', {
            listVersion: lastLocalList.listVersion,
            LocalList: lastLocalList.localList
          })
        }
      }
    }
    // Upsert: –°–æ–∑–¥–∞–π –∏–ª–∏ –æ–±–Ω–æ–≤–∏ ChargePoint
    chargePoint = await ChargePoint.findOneAndUpdate(
      { id: chargePointId },  // –ì–¥–µ –∏—Å–∫–∞—Ç—å (–ø–æ ID)
      {
        id: chargePointId,
        vendor: req.chargePointVendor,
        model: req.chargePointModel,
        boxSerial: req.chargeBoxSerialNumber,
        pointSerial: req.chargeBoxSerialNumber,
        firmware: req.firmwareVersion,
        lastBoot: new Date(),  // –î–æ–±–∞–≤—å –ø–æ–ª–µ lastBoot –≤ –º–æ–¥–µ–ª—å ChargePoint
        lastOffline: null, // –°–±—Ä–æ—Å—å lastOffline –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µd
        iccid: req.iccid,
        imsi: req.imsi,
        meterType: req.meterType,
        meterSerialNumber: req.meterSerialNumber
      },
      { upsert: true, new: true }  // upsert: true = —Å–æ–∑–¥–∞–π, –µ—Å–ª–∏ –Ω–µ—Ç; new: true = –≤–µ—Ä–Ω–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π
    );

    // üî• –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∑–¥–µ—Å—å - –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏ StatusNotification
    // connectionManager.initializeConnectors(chargePointId)

    logger.info(`Boot from ${chargePointId}:
      Vendor: ${req.chargePointVendor}
      Model: ${req.chargePointModel} 
      Point serial number: ${req.meterSerialNumber}
      Box serial number: ${req.chargeBoxSerialNumber} 
      Firmware: ${req.firmwareVersion} 
      iccid: ${req.iccid} 
      imsi: ${req.imsi} 
      Meter type: ${req.meterType} 
      Meter serial number: ${req.meterSerialNumber} 
      saved to MongoDB`);

  } catch (err) {
    logger.error(`DB save error: ${err} `);
  }

  return { currentTime: new Date().toISOString(), interval: INTERVAL, status: 'Accepted' };
}