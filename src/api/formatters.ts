// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ ISO —Å—Ç—Ä–æ–∫—É —Å —É—á—ë—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
 * –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ ISO - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å
 * –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ–±—ä–µ–∫—Ç Date - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ ISO —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–æ–Ω–æ–π
 */
export function formatDateTime(date: Date | string | undefined | null): string | null {
    if (!date) return null;

    // –ï—Å–ª–∏ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (typeof date === 'string') {
        return date;
    }

    // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç Date, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ISO
    if (date instanceof Date) {
        return date.toISOString();
    }

    return null;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è API –æ—Ç–≤–µ—Ç–∞
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
 */
export function formatTransaction(tx: any) {
    return {
        ...tx,
        startTime: formatDateTime(tx.startTime),
        stopTime: formatDateTime(tx.stopTime),
    };
}

export function formatConnector(connectorId: number, state: any) {
    return {
        id: connectorId,
        type: state.type || 'Unknown',
        status: state.status || 'Unknown',
        power_kW: state.currentPower || 0,
        soc: state.soc || null,
        transactionId: state.transactionId || null, // FIX: –±—ã–ª–æ currentTransactionId
        price: 15.0, // –∏–ª–∏ –ø–æ–ª—É—á–∞–π –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ –≤ –ë–î
        updatedAt: state.lastUpdate || state.updatedAt || new Date().toISOString()
    };
}

export function formatStation(stationId: string, connectorsMap: Map<number, any>) {
    const connectors = Array.from(connectorsMap.entries())
        .filter(([id]) => id > 0) // üî• –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä 0
        .map(([id, state]) => formatConnector(id, state));

    const status = connectors.some(c => c.status === 'Charging')
        ? 'Charging'
        : connectors.every(c => c.status === 'Available')
            ? 'Available'
            : 'PartiallyAvailable';

    return {
        id: stationId,
        name: `Station ${stationId}`,
        status,
        connectors
    };
}
6