#!/usr/bin/env node

/**
 * üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ fora072
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏
 */

const axios = require('axios');

const SERVER_URL = 'http://176.88.248.139:8081';
const STATION_ID = 'fora072';

// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

async function sendRemoteCommand(action, params = {}) {
    try {
        const response = await axios.post(`${SERVER_URL}/api/remote-control`, {
            chargePointId: STATION_ID,
            action,
            ...params
        });
        return response.data;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ${action}:`, error.response?.data || error.message);
        return null;
    }
}

async function main() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ fora072\n');

    // –ö–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const configKeys = [
        'MeterValueSampleInterval',
        'MeterValuesSampledData',
        'MeterValuesAlignedData',
        'ClockAlignedDataInterval',
        'StopTxnSampledData',
        'StopTxnAlignedData',
        'SampledDataTxUpdatedInterval',
        'SampledDataTxStartedMeasurands',
        'SampledDataTxUpdatedMeasurands',
        'SampledDataTxEndedMeasurands'
    ];

    console.log('üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');

    for (const key of configKeys) {
        console.log(`\nüîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á: ${key}`);
        const result = await sendRemoteCommand('GetConfiguration', { key });

        if (result) {
            console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ`, JSON.stringify(result, null, 2));
        } else {
            console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞`);
        }

        await delay(2000); // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }

    console.log('\n\nüìä –¢–∞–∫–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –í–°–Æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–∏...\n');
    const allConfig = await sendRemoteCommand('GetConfiguration', {});

    if (allConfig) {
        console.log('‚úÖ –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
        console.log(JSON.stringify(allConfig, null, 2));
    }

    console.log('\n\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è MeterValueSampleInterval');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è MeterValuesSampledData');
    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ readonly');
    console.log('   4. –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã readonly - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–æ—à–∏–≤–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏');
}

main().catch(console.error);
